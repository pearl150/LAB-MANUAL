#include <iostream>
using namespace std;

int divide(int dividend, int divisor) {
    if (divisor == 0) throw invalid_argument("Division by zero!");
    int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;
    int quotient = 0, absDividend = abs(dividend), absDivisor = abs(divisor);
    
    while (absDividend >= absDivisor) {
        absDividend -= absDivisor;
        quotient++;
    }
    return sign * quotient;
}

double divideFloat(double dividend, double divisor, int precision = 6) {
    if (divisor == 0) throw invalid_argument("Division by zero!");
    double quotient = divide(dividend, divisor), remainder = dividend - (quotient * divisor), factor = 0.1;

    for (int i = 0; i < precision; i++) {
        remainder *= 10;
        quotient += divide(remainder, divisor) * factor;
        remainder -= divide(remainder, divisor) * divisor;
        factor /= 10;
    }
    return quotient;
}

int main() {
    int a, b;
    cout << "Enter dividend and divisor: ";
    cin >> a >> b;

    try {
        cout << "Integer Division: " << divide(a, b) << endl;
        cout << "Floating-Point Division: " << divideFloat(a, b) << endl;
    } catch (const exception &e) {
        cout << e.what() << endl;
    }

    return 0;
}
